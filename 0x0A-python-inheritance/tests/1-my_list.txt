The `1-my_list` module
======================

Using `1-my_list`
-----------------

Import function from module:
>>> MyList = __import__('1-my_list').MyList

Test Cases:
-----------

1. Correct Class Type Test:
>>> ml = MyList()
>>> type(ml) == MyList
True

2. Correct Instance Test:
>>> ml = MyList()
>>> isinstance(ml, list)
True

3. `print_sorted` Method is an Instance Method:
>>> type(MyList.__dict__['print_sorted'])
<class 'function'>

4. `print_sorted` Method Called via Class with No Arguments:
>>> MyList.print_sorted()
Traceback (most recent call last):
TypeError: print_sorted() missing 1 required positional argument: 'self'

5. `print_sorted` Method Called with Additional Arguments:
>>> ml = MyList()
>>> ml.print_sorted([4, 2, 5])
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

>>> ml.print_sorted([4, 2, 5], 1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 3 were given

6. Empty List Test:
>>> ml = MyList()
>>> ml.print_sorted()
[]

7. Normal List Test:
>>> ml = MyList([2, 10, 1])
>>> ml.print_sorted()
[1, 2, 10]

8. Negative Integers List Test:
>>> ml = MyList([-1000, -98, -232565, 0, -23423434, -123])
>>> ml.print_sorted()
[-23423434, -232565, -1000, -123, -98, 0]

9. Original List Unchanged Test:
>>> ml = MyList([2, 10, 1, -10, 20, 100, 0])
>>> ml.print_sorted()
[-10, 0, 1, 2, 10, 20, 100]
>>> ml
[2, 10, 1, -10, 20, 100, 0]

10. List Already in Order Test:
>>> ml = MyList([-10, 0, 1, 2, 10, 20, 100])
>>> ml.print_sorted()
[-10, 0, 1, 2, 10, 20, 100]

11. Append Test:
>>> ml = MyList()
>>> ml.append(10)
>>> ml
[10]

